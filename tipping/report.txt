EECS 4411: Database Management Systems
Project Report
April 17, 2018

Partners:
Matthew MacEachern
mcmaceac@my.yorku.ca.
#213960216


Matthew Cardinal
mjcar@my.yorku.ca
#213195276

1.
In this query, a simple select from the Customer table was used in order to test different access paths for simple queries. In this case, our predicate checked a range of cust# values from the table. In the case of oneB.sql, the entire range of possible cust# values was used as the value of the predicate. In the case of oneA.sql, the range was restricted as to only have one value (cust#=4) satisfying the predicate. When comparing the plan files for both of these queries, we can see that the estimated cardinalities are vastly different because of the values of these predicates. This causes the evaluator to have an index scan as part of the access path for oneA.sql, since we are only looking for a restricted number of values, while the access path for oneB.sql does not contain this index scan. Thus the access paths for the two variants are different.

2.
Thinking about this problem logically, we noticed that the aggregation operations would require a sort when a group by clause was used since db2 would need to sort the tuples on the grouping attribute, which in the case of our query was price. It would then need to watch for group boundaries in order to compute the aggregate value for each group. In our query twoB.sql, we compute the most expensive book for each genre (by using all genres as the value of the predicate), which requires an explicit sort of the tuples on genre. In our query twoA.sql, the value of our predicate is a single genre. This means that no explicit sort is required since there is only one value of the grouping attribute. This means a simple scan can be performed, checking if the genre is Education, and seeing if the price is higher than the highest we have seen so far. This is similar to a simple scan to find the max of all books.

3.
In this query, the initial idea was to use a field that had an index on it, since this would be required to get the index nested loop join to work for one of the variants. In the case of the query threeA.sql, an inner join on all three tables is performed by using the book# fields in the Book and Purchase tables and the cust# fields in the Customer and Purchase tables. The resulting query plan shows that a hash join is used in order to join the tables. In the query threeB.sql, instead of performing an inner join on Purchase and Customer, the value of the predicate is changed to find a single customer (the customer with cust#=4). This causes the index to be more useful since we know the location of the row with cust#=4. This causes the index nested loop join to be used instead of hash join.

4.
This query showcases how a shift in cardinality in just a single predicate can drastically affect not only the type of joins, but also their order. The query asks the average sale of books when grouped by city and genre. In variant A, which includes all purchases made from the beginning of 2003, we have three nested hash joins. Since book has the smallest number of tuples, it is joined first with Purchase, which has the largest estimated cardinality. The subsequent hash join with Customer minimizes the total cardinality of the query. When we adjust the matching 'when' field to the beginning of 2010, the cardinality of matching Purchase tuples drops dramatically. This makes nested loops the most efficient option, so Purchase is joined as the outer relation in an index nested loop with Customer (maximizing the reduction factor). This, in turn, acts as the outer relation for a further index nested loop join on books. So, because the optimizer minimizes reduction factors, we have two distinct join orders for our three relations.


5. This query showcases two problems with exceptional user queries which can be handled by a clever optimizer: redundancy and contradiction. Variant A is an example of contradiction. Since a customer's city cannot be both 'Toronto' and "Hamilton', the optimizer knows that the cardinality should be 0. Rather than perform any table operations, it immediately returns nothing. Variant B is an example of redundancy: a naive optimizer implementation might incorrectly estimate the cardinality of the query using the product of independent probabilities, but db2 correctly eliminates the redundancy. The result is a simple table scan of the Customer relation, while a smaller cardinality estimate might have resulted in a more expensive technique.
